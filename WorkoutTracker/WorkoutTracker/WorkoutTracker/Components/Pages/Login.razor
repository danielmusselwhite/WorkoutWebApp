@page "/login"
@*BlazorWebApp: The following line required for Interactivity eg getting the values instead of empty strings*@
@rendermode InteractiveServer

@using WorkoutTracker.Components.Authentication

@inject NavigationManager Navigation
@inject SimpleAuthenticationStateProvider AuthStateProvider

<h3>@(isRegistering ? "Register" : "Login")</h3>

<EditForm Model="@loginModel" OnValidSubmit="HandleLogin">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div>
        <InputText id="username" @bind-Value="loginModel.Username" placeholder="Username" />
    </div>

    <div>
        <InputText id="password" @bind-Value="loginModel.Password" placeholder="Password" type="password" />
    </div>

    <button type="submit">@((isRegistering ? "Register" : "Login"))</button>
</EditForm>

@if (feedbackMessage != null)
{
    <div class="alert @feedbackClass" role="alert">
        @feedbackMessage
    </div>
}

<button @onclick="ToggleRegisterMode">@((isRegistering ? "Switch to Login" : "Switch to Register"))</button>

@code {
    private LoginModel loginModel = new LoginModel();
    private bool isRegistering = false;  // Track if we are in Register mode or not.
    private string feedbackMessage;
    private string feedbackClass;

    private async Task HandleLogin()
    {
        // reset feedback message
        feedbackMessage = null;
        feedbackClass = null;

        if (isRegistering)
        {
            // Register the user
            System.Diagnostics.Debug.WriteLine("Registering user");
            await HandleRegister();
        }
        else
        {
            // Perform login logic
            System.Diagnostics.Debug.Print("Checking Authentication State From Login");
            bool success = await AuthStateProvider.Login(loginModel.Username, loginModel.Password);
            if (success)
            {
                System.Diagnostics.Debug.WriteLine("Login successful");
                Navigation.NavigateTo("/");
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Login failed");
                await Task.Delay(100); // Delay to prevent immediate feedback message change
                feedbackMessage = "Login failed. Please check your credentials.";
                feedbackClass = "alert-danger";
            }
        }
    }

    private async Task HandleRegister()
    {
        // reset feedback message
        feedbackMessage = null;
        feedbackClass = null;

        bool success = await AuthStateProvider.Register(loginModel.Username, loginModel.Password);

        if (success)
        {
            System.Diagnostics.Debug.WriteLine("Registration successful");
            feedbackMessage = "Account created successfully!";
            feedbackClass = "alert-success";
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("Registration failed");
            feedbackMessage = "Username already exists. Please choose a different one.";
            feedbackClass = "alert-warning";
        }
    }

    private void ToggleRegisterMode()
    {
        // reset feedback message
        feedbackMessage = null;
        feedbackClass = null;

        // Toggle between Register and Login modes
        System.Diagnostics.Debug.WriteLine("Toggling register mode");
        isRegistering = !isRegistering;
        feedbackMessage = null; // Reset feedback message when switching modes.
    }

    public class LoginModel
    {
        public string Username { get; set; }
        public string Password { get; set; }
    }
}